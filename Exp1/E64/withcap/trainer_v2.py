# -*- coding: utf-8 -*-
"""model_bbox.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XqUWeUu_KUxlwDFpdF1vtTGJgUJXVcvS

# llama3-8bit-bnb-4bit
"""

# from google.colab import drive
# drive.mount('/content/drive')

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/drive/MyDrive/vllm

"""### Dependecies"""

# Commented out IPython magic to ensure Python compatibility.
# %pip install bitsandbytes
# %pip install datasets
# %pip install rouge-score
# %pip install bert-score
# %pip install xformers

# Set CUDA to see only one GPU
#os.environ["CUDA_VISIBLE_DEVICES"] = "0"

# major_version, minor_version = torch.cuda.get_device_capability()
# Must install separately since Colab has torch 2.2.1, which breaks packages

# !pip install "unsloth[colab-new] @ git+https://github.com/unslothai/unsloth.git"

# if major_version >= 8:
#     # Use this for new GPUs like Ampere, Hopper GPUs (RTX 30xx, RTX 40xx, A100, H100, L40)
#     !pip install --no-deps packaging ninja einops flash-attn xformers trl peft accelerate bitsandbytes
# else:
#     # Use this for older GPUs (V100, Tesla T4, RTX 20xx)
#     !pip install --no-deps "xformers<0.0.27" "trl<0.9.0" peft accelerate bitsandbytes
# pass

# !pip install xformers

# Training import
import torch
import os
os.environ["CUDA_VISIBLE_DEVICES"] = "0"
from unsloth import FastLanguageModel
import torch
from datasets import load_dataset
from trl import SFTTrainer
from transformers import TrainingArguments

# Evaluation import
# Find Out different scores
import pandas as pd
from sklearn.model_selection import train_test_split
from datasets import load_dataset
from transformers import TrainingArguments, Trainer, GPT2LMHeadModel, GPT2Tokenizer
from nltk.translate.bleu_score import sentence_bleu
from rouge_score import rouge_scorer
from bert_score import score as bert_score
from collections import Counter
import numpy as np

"""### Load Model"""

max_seq_length = 2048 # Choose any! We auto support RoPE Scaling internally!
dtype = torch.float16 # None for auto detection. Float16 for Tesla T4, V100, Bfloat16 for Ampere+
load_in_4bit = True # Use 4bit quantization to reduce memory usage. Can be False.
device = torch.device("cuda:0")

model, tokenizer = FastLanguageModel.from_pretrained(
    model_name="unsloth/Meta-Llama-3.1-8B-bnb-4bit",
    max_seq_length = max_seq_length,
    dtype = dtype,
    cache_dir = "./llama3.1",
    load_in_4bit = load_in_4bit,
    # token = "hf_...", # use one if using gated models like meta-llama/Llama-2-7b-hf
)

model = FastLanguageModel.get_peft_model(
    model,
    r = 16, # Choose any number > 0 ! Suggested 8, 16, 32, 64, 128
    target_modules = ["q_proj", "k_proj", "v_proj", "o_proj",
                      "gate_proj", "up_proj", "down_proj",],
    lora_alpha = 16,
    lora_dropout = 0, # Supports any, but = 0 is optimized
    bias = "none",    # Supports any, but = "none" is optimized
    # [NEW] "unsloth" uses 30% less VRAM, fits 2x larger batch sizes!
    use_gradient_checkpointing = "unsloth", # True or "unsloth" for very long context
    random_state = 3407,
    use_rslora = False,  # We support rank stabilized LoRA
    loftq_config = None, # And LoftQ
)

"""### Training"""

alpaca_prompt = """Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.

### Instruction:
{}

### Input:
{}

### Response:
{}"""

EOS_TOKEN = tokenizer.eos_token # Must add EOS_TOKEN
def formatting_prompts_func(examples):
    instructions = examples["instruction"]
    inputs       = examples["input"]
    outputs      = examples["description"]
    texts = []
    for instruction, input, output in zip(instructions, inputs, outputs):
        # Must add EOS_TOKEN, otherwise your generation will go on forever!
        text = alpaca_prompt.format(instruction, input, output) + EOS_TOKEN
        texts.append(text)
    return { "text" : texts, }
pass

csv_file_path = "d64_bbox_iembd_cap.csv"

dataset = load_dataset('csv', data_files={'train': csv_file_path}) #load the dataset

# Reserve 10% of the data for testing
fulldataset = dataset
dataset = fulldataset.train_test_split(test_size=0.1)['train']
test_data = fulldataset.train_test_split(test_size=0.1)['test']

dataset = dataset.map(formatting_prompts_func, batched = True,)
#for own dataset training

# Assuming `dataset` and `max_seq_length` are correctly set up
trainer = SFTTrainer(
    model=model,
    tokenizer=tokenizer,
    train_dataset=dataset['train'],  # ensure this points to a dataset split
    dataset_text_field="text",
    max_seq_length=max_seq_length,
    dataset_num_proc=2,
    packing=False,
    args=TrainingArguments(
        output_dir="outputs",
        per_device_train_batch_size=2,
        gradient_accumulation_steps=4,
        num_train_epochs=2,  # example parameter you might need
        warmup_steps=5,
        max_steps=300,
        learning_rate=2e-4,
        fp16=torch.cuda.is_available(),  # simplified check for FP16 support
        logging_steps=1,
        optim="adamw_torch",
        weight_decay=0.01,
        lr_scheduler_type="linear",
        seed=3407
    ),
)

gpu_stats = torch.cuda.get_device_properties(0)
start_gpu_memory = round(torch.cuda.max_memory_reserved() / 1024 / 1024 / 1024, 3)
max_memory = round(gpu_stats.total_memory / 1024 / 1024 / 1024, 3)
print(f"GPU = {gpu_stats.name}. Max memory = {max_memory} GB.")
print(f"{start_gpu_memory} GB of memory reserved.")

trainer_stats = trainer.train()

model.save_pretrained("llama3.1_model64_bbox_iembd_cap_02_09_2024") # Local saving


# Script to find out different scores

# Function to calculate distinct-1 and distinct-2
def calculate_distinctness(predictions):
    unigrams = Counter()
    bigrams = Counter()
    for pred in predictions:
        tokens = pred.split()
        unigrams.update(tokens)
        bigrams.update(zip(tokens, tokens[1:]))

    distinct1 = len(unigrams) / sum(unigrams.values()) if unigrams else 0
    distinct2 = len(bigrams) / sum(bigrams.values()) if bigrams else 0
    return distinct1, distinct2

# Function to calculate repetition rate
def calculate_repetition_rate(predictions):
    total_tokens = 0
    repeated_tokens = 0
    for pred in predictions:
        tokens = pred.split()
        total_tokens += len(tokens)
        repeated_tokens += len(tokens) - len(set(tokens))

    return repeated_tokens / total_tokens if total_tokens else 0

# Function to calculate average length ratio
def calculate_length_ratio(predictions, references):
    ratios = [len(pred.split()) / len(ref.split()) if len(ref.split()) > 0 else 0 for pred, ref in zip(predictions, references)]
    return sum(ratios) / len(ratios)

# Function to calculate BLEU, ROUGE, BERTScore, Distinctness, Repetition Rate, Length Ratio, and Perplexity
def calculate_metrics(predictions, references, model, tokenizer):
    # BLEU and ROUGE
    bleu_scores = []
    rouge_scores = {"rouge1": [], "rouge2": [], "rougeL": []}
    scorer = rouge_scorer.RougeScorer(['rouge1', 'rouge2', 'rougeL'], use_stemmer=True)

    for pred, ref in zip(predictions, references):
        # BLEU score
        bleu_score = sentence_bleu([ref.split()], pred.split())
        bleu_scores.append(bleu_score)

        # ROUGE scores
        scores = scorer.score(ref, pred)
        rouge_scores["rouge1"].append(scores["rouge1"].fmeasure)
        rouge_scores["rouge2"].append(scores["rouge2"].fmeasure)
        rouge_scores["rougeL"].append(scores["rougeL"].fmeasure)

    avg_bleu = sum(bleu_scores) / len(bleu_scores)
    avg_rouge1 = sum(rouge_scores["rouge1"]) / len(rouge_scores["rouge1"])
    avg_rouge2 = sum(rouge_scores["rouge2"]) / len(rouge_scores["rouge2"])
    avg_rougeL = sum(rouge_scores["rougeL"]) / len(rouge_scores["rougeL"])

    # BERTScore
    P, R, F1 = bert_score(predictions, references, model_type="bert-base-uncased", lang="en", rescale_with_baseline=False)

    # Distinctness
    distinct1, distinct2 = calculate_distinctness(predictions)

    # Repetition Rate
    repetition_rate = calculate_repetition_rate(predictions)

    # Length Ratio
    length_ratio = calculate_length_ratio(predictions, references)

    # Perplexity
    # encodings = tokenizer(predictions, return_tensors='pt', padding=True, truncation=True)
    # max_length = encodings.input_ids.size(-1)
    # stride = 512
    # nlls = []
    # for i in range(0, max_length, stride):
    #     input_ids = encodings.input_ids[:, i:i + stride].to('cuda')
    #     target_ids = input_ids.clone()
    #     with torch.no_grad():
    #         outputs = model(input_ids, labels=target_ids)
    #         neg_log_likelihood = outputs.loss
    #     nlls.append(neg_log_likelihood)

    # perplexity = torch.exp(torch.mean(torch.tensor(nlls)))

    return avg_bleu, avg_rouge1, avg_rouge2, avg_rougeL, P.mean().item(), R.mean().item(), F1.mean().item(), distinct1, distinct2, repetition_rate, length_ratio

# Function to load dataset, perform inference, and calculate metrics
def evaluate_model_on_dataset(model, tokenizer):
    # # Load dataset
    # dataset = load_dataset('csv', data_files={'train': csv_file_path})

    # # Take 10% of the data for inference
    # dataset = dataset['train']
    # # small_dataset = dataset
    # small_dataset = dataset.train_test_split(test_size=0.9)['train']  # 10% of the data

    # # Format prompts
    formatted_dataset = test_data.map(formatting_prompts_func, batched=True)

    predictions = []
    ground_truths = []

    # Perform inference one by one
    for example in formatted_dataset['text']:
        inputs = tokenizer(
            example,
            return_tensors='pt',
            padding=True,
            truncation=True,
            max_length=max_seq_length
        ).to('cuda:0')

        output = model.generate(**inputs, max_new_tokens=64)
        prediction = tokenizer.decode(output[0], skip_special_tokens=True)
        predictions.append(prediction)

        ground_truth = example.split("### Response:")[1].strip()
        ground_truths.append(ground_truth)

    # Calculate metrics
    return calculate_metrics(predictions, ground_truths, model, tokenizer)

# Evaluate the model on the dataset
avg_bleu, avg_rouge1, avg_rouge2, avg_rougeL, bert_p, bert_r, bert_f1, distinct1, distinct2, repetition_rate, length_ratio = evaluate_model_on_dataset(model, tokenizer)
print(f"Average BLEU Score: {avg_bleu}")
print(f"Average ROUGE-1 Score: {avg_rouge1}")
print(f"Average ROUGE-2 Score: {avg_rouge2}")
print(f"Average ROUGE-L Score: {avg_rougeL}")
print(f"BERTScore Precision: {bert_p}")
print(f"BERTScore Recall: {bert_r}")
print(f"BERTScore F1: {bert_f1}")
print(f"Distinct-1: {distinct1}")
print(f"Distinct-2: {distinct2}")
print(f"Repetition Rate: {repetition_rate}")
print(f"Length Ratio: {length_ratio}")
# print(f"Perplexity: {perplexity}")
